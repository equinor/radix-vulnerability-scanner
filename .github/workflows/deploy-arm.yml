name: Deploy ARM

on:
  push:
    branches: [main, release]

permissions:
  actions: read
  checks: read
  contents: read
  deployments: read
  id-token: write
  issues: read
  discussions: read
  packages: read
  pages: read
  pull-requests: read
  repository-projects: read
  security-events: read
  statuses: read

jobs:
  get-target-configs:
    name: Get target configs for branch
    outputs:
      target_configs: ${{ steps.get-target-configs.outputs.target_configs }}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Get target configs
        id: get-target-configs
        run: |
          configs=$(ls $GITHUB_WORKSPACE/.github/workflows/config/${GITHUB_REF_NAME} | jq -Rsc '. / "\n" - [""]')
          echo ::set-output name=target_configs::${configs}  

  deploy-sql-server:
    runs-on: ubuntu-20.04
    needs:
      - get-target-configs
    strategy:
      fail-fast: false
      matrix: 
        config: ${{ fromJson(needs.get-target-configs.outputs.target_configs) }}
    steps:
    - uses: actions/checkout@v2
    - name: Persist environment from ${{ matrix.config }} across steps
      run: |
        env -i GITHUB_WORKSPACE=$GITHUB_WORKSPACE /bin/bash -c "set -a && source $GITHUB_WORKSPACE/.github/workflows/config/${GITHUB_REF_NAME}/${{ matrix.config }} && printenv" > /tmp/env_vars
        while read -r env_var
        do
          echo "$env_var" >> $GITHUB_ENV
        done < /tmp/env_vars

    - uses: azure/login@v1
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    - name: Get DB password from KV
      run: |
        db_admin_pw=$(az keyvault secret show --id https://${KEY_VAULT_NAME}.vault.azure.net/secrets/${DB_ADMIN_SECRET_NAME} --query value --output tsv)
        echo "DB_ADMIN_PASSWORD=$db_admin_pw" >> $GITHUB_ENV

    - name: Deploy SQL Server and DB
      run: |
        $GITHUB_WORKSPACE/.github/workflows/scripts/deploy.sh

    - name: Whitelist Runner IP in firewalls
      shell: pwsh
      run: |
        ${env:GITHUB_WORKSPACE}\.github\workflows\scripts\whitelist-ip.ps1

    - name: Install SqlServer PS module
      shell: pwsh
      run: |
        Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
        Install-Module -Name SqlServer

    - name: Creating DB schema and tables
      shell: pwsh
      run: |
        ${env:GITHUB_WORKSPACE}\.github\workflows\scripts\create-db.ps1

    - name: Blacklist Runner IP in firewalls
      shell: pwsh
      if: ${{ always() }}
      run: |
        ${env:GITHUB_WORKSPACE}\.github\workflows\scripts\blacklist-ip.ps1