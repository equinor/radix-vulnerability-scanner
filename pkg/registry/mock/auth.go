// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/registry/auth.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	registry "github.com/equinor/radix-vulnerability-scanner/pkg/registry"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthProvider is a mock of AuthProvider interface.
type MockAuthProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAuthProviderMockRecorder
}

// MockAuthProviderMockRecorder is the mock recorder for MockAuthProvider.
type MockAuthProviderMockRecorder struct {
	mock *MockAuthProvider
}

// NewMockAuthProvider creates a new mock instance.
func NewMockAuthProvider(ctrl *gomock.Controller) *MockAuthProvider {
	mock := &MockAuthProvider{ctrl: ctrl}
	mock.recorder = &MockAuthProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthProvider) EXPECT() *MockAuthProviderMockRecorder {
	return m.recorder
}

// GetAuth mocks base method.
func (m *MockAuthProvider) GetAuth(ctx context.Context, image string) (*registry.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuth", ctx, image)
	ret0, _ := ret[0].(*registry.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuth indicates an expected call of GetAuth.
func (mr *MockAuthProviderMockRecorder) GetAuth(ctx, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuth", reflect.TypeOf((*MockAuthProvider)(nil).GetAuth), ctx, image)
}
