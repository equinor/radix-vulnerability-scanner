package handler

import (
	"context"
	"time"

	"github.com/equinor/radix-vulnerability-scanner/pkg/db"
	"github.com/equinor/radix-vulnerability-scanner/pkg/generic"
	"github.com/equinor/radix-vulnerability-scanner/pkg/scan"
	logger "github.com/sirupsen/logrus"
)

var defaultTimeout = 5 * time.Minute
var defaultRescanThreshold = 1 * time.Hour

type (
	imageVulnerabilityScanner struct {
		scanner         scan.Scanner
		repository      db.Repository
		scanTimeout     time.Duration
		rescanThreshold time.Duration
	}
)

func NewVulnerabilityScanner(scanner scan.Scanner, repository db.Repository) Handler[string] {
	return &imageVulnerabilityScanner{
		scanner:         scanner,
		repository:      repository,
		scanTimeout:     defaultTimeout,
		rescanThreshold: defaultRescanThreshold,
	}
}

func (s *imageVulnerabilityScanner) Handle(ctx context.Context, image string) error {
	// TODO: use https://github.com/go-redsync/redsync for distributed locking
	// As long as we run the scanner as a single pod/replica and with a single worker "thread"
	// we don't need to worry about locking
	// Locking is required if we run multiple workers and/or multiple replicas
	// and we need to ensure that an image is not concurrently processed by two workers/replicas

	if skipScan, err := s.isLastScanWithinRescanThreshold(ctx, image); err != nil {
		return err
	} else if skipScan {
		logger.Debugf("skipping scan of image %s, recently scanned", image)
		return nil
	}

	scanCtx, cancel := context.WithTimeout(ctx, s.scanTimeout)
	defer cancel()
	scanVuln, err := s.scanner.Scan(scanCtx, image)
	scanSuccess := err == nil
	vulnerabilitiesBulk := []db.VulnerabilityBulkDto{}
	identifiersBulk := []db.VulnerabilityIdentifierBulkDto{}
	referencesBulk := []db.VulnerabilityReferenceBulkDto{}
	if err == nil {
		for _, v := range generic.AsEnumerable(scanVuln.Vulnerabilities).Distinct(func(item scan.Vulnerability) any { return item.Id }) {
			vulnerabilitiesBulk = append(vulnerabilitiesBulk, db.VulnerabilityBulkDto{
				ExternalId:       v.Id,
				PackageName:      v.PackageName,
				Version:          v.Version,
				Description:      v.Description,
				Severity:         v.Severity,
				CVSS:             v.CVSS,
				CVSSv3:           v.CVSSv3,
				CreationTime:     v.CreationTime,
				ModificationTime: v.ModificationTime,
				PublicationTime:  v.PublicationTime,
				DisclosureTime:   v.DisclosureTime,
			})
			for ik, iv := range v.Identifiers {
				for _, i := range iv {
					identifiersBulk = append(identifiersBulk, db.VulnerabilityIdentifierBulkDto{
						ExternalId:     v.Id,
						IdentifierType: ik,
						Identifier:     i,
					})
				}
			}
			for _, r := range v.References {
				referencesBulk = append(referencesBulk, db.VulnerabilityReferenceBulkDto{
					ExternalId: v.Id,
					Url:        r.URL,
				})
			}
		}
	}
	dbCtx, cancel := context.WithTimeout(ctx, 30*time.Second)
	defer cancel()
	return s.repository.RegisterImageScan(dbCtx, image, time.Now(), scanSuccess, vulnerabilitiesBulk, identifiersBulk, referencesBulk)
}

func (s *imageVulnerabilityScanner) isLastScanWithinRescanThreshold(ctx context.Context, image string) (bool, error) {
	scanInfo, err := s.repository.GetLastImageScan(ctx, image)
	if err != nil {
		return false, err
	}
	if scanInfo == nil {
		return false, nil
	}

	return time.Since(scanInfo.ScanTime) < s.rescanThreshold, nil
}
