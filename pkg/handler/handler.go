package handler

import (
	"context"
	"time"

	"github.com/equinor/radix-vulnerability-scanner/pkg/db"
	"github.com/equinor/radix-vulnerability-scanner/pkg/dockercfg"
	"github.com/equinor/radix-vulnerability-scanner/pkg/generic"
	"github.com/equinor/radix-vulnerability-scanner/pkg/scan"
	"github.com/rs/zerolog/log"
	"k8s.io/utils/strings/slices"
)

var defaultTimeout = 5 * time.Minute
var defaultRescanAge = 24 * time.Hour
var validIdentifierTypes = []string{"CVE", "CWE"}

type (

	// Handler interface
	Handler interface {
		Handle(ctx context.Context, imageName string, dockerConfig dockercfg.DockerConfig) error
	}

	// Option configuration for vulnerability scanner
	Option func(s *imageVulnerabilityScanner)

	imageVulnerabilityScanner struct {
		scanner     scan.Scanner
		repository  db.Repository
		scanTimeout time.Duration
		rescanAge   time.Duration
	}
)

// WithScanTimeout sets the scan timeout
func WithScanTimeout(t time.Duration) Option {
	return func(s *imageVulnerabilityScanner) {
		s.scanTimeout = t
	}
}

// WithRescanAge sets the rescan age
func WithRescanAge(t time.Duration) Option {
	return func(s *imageVulnerabilityScanner) {
		s.rescanAge = t
	}
}

// New creates a Handler to scan images for vulnerabilities and store the scan results in a database
func New(scanner scan.Scanner, repository db.Repository, opts ...Option) Handler {
	s := &imageVulnerabilityScanner{
		scanner:     scanner,
		repository:  repository,
		scanTimeout: defaultTimeout,
		rescanAge:   defaultRescanAge,
	}

	for _, o := range opts {
		o(s)
	}

	return s
}

// Handle scans an image and stores the result
func (s *imageVulnerabilityScanner) Handle(ctx context.Context, imageName string, dockerConfig dockercfg.DockerConfig) error {
	// TODO: use https://github.com/go-redsync/redsync for distributed locking
	// As long as we run the scanner as a single pod/replica and with a single worker "thread"
	// we don't need to worry about locking
	// Locking is required if we run multiple workers and/or multiple replicas
	// and we need to ensure that an image is not concurrently processed by two workers/replicas

	if skipScan, err := s.isLastScanWithinRescanThreshold(ctx, imageName); err != nil {
		return err
	} else if skipScan {
		log.Info().Str("image", imageName).Msgf("skipping scan of image, recently scanned")
		return nil
	}

	log.Info().Str("image", imageName).Msgf("scanning image")
	scanCtx, cancel := context.WithTimeout(ctx, s.scanTimeout)
	defer cancel()
	scanResult, err := s.scanner.Scan(scanCtx, imageName, dockerConfig)
	if err != nil {
		log.Warn().Str("image", imageName).Err(err).Msgf("error scanning image")
	}
	scanSuccess := err == nil
	vulnerabilitiesBulk := []db.VulnerabilityBulkDto{}
	identifiersBulk := []db.VulnerabilityIdentifierBulkDto{}
	referencesBulk := []db.VulnerabilityReferenceBulkDto{}
	var baseImage *string

	if scanSuccess && scanResult != nil {
		baseImage = scanResult.Docker.BaseImage

		for _, v := range generic.AsEnumerable(scanResult.Vulnerabilities).Distinct(func(item scan.Vulnerability) any { return item.Id }) {
			vulnerabilitiesBulk = append(vulnerabilitiesBulk, db.VulnerabilityBulkDto{
				ExternalId:       v.Id,
				PackageName:      v.PackageName,
				Version:          v.Version,
				Title:            v.Title,
				Description:      v.Description,
				Severity:         v.Severity,
				CVSS:             v.CVSS,
				CVSSv3:           v.CVSSv3,
				CreationTime:     v.CreationTime,
				ModificationTime: v.ModificationTime,
				PublicationTime:  v.PublicationTime,
				DisclosureTime:   v.DisclosureTime,
			})
			for ik, iv := range v.Identifiers {
				if !slices.Contains(validIdentifierTypes, ik) {
					continue
				}
				for _, i := range iv {
					identifiersBulk = append(identifiersBulk, db.VulnerabilityIdentifierBulkDto{
						ExternalId:     v.Id,
						IdentifierType: ik,
						Identifier:     i,
					})
				}
			}
			for _, r := range v.References {
				referencesBulk = append(referencesBulk, db.VulnerabilityReferenceBulkDto{
					ExternalId: v.Id,
					Url:        r.URL,
				})
			}
		}
	}

	dbCtx, cancel := context.WithTimeout(ctx, 30*time.Second)
	defer cancel()
	log.Info().Str("image", imageName).Msgf("storing scan results for image")
	return s.repository.RegisterImageScan(dbCtx, imageName, baseImage, time.Now(), scanSuccess, vulnerabilitiesBulk, identifiersBulk, referencesBulk)
}

func (s *imageVulnerabilityScanner) isLastScanWithinRescanThreshold(ctx context.Context, image string) (bool, error) {
	dbCtx, cancel := context.WithTimeout(ctx, 30*time.Second)
	defer cancel()
	scanInfo, err := s.repository.GetLastImageScan(dbCtx, image)
	if err != nil {
		return false, err
	}
	if scanInfo == nil {
		return false, nil
	}

	return time.Since(scanInfo.ScanTime) < s.rescanAge, nil
}
