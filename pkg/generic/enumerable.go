package generic

import "sort"

type Enumerable[T any] []T

func AsEnumerable[T any](items []T) Enumerable[T] {
	return Enumerable[T](items)
}

func (src Enumerable[T]) OrderBy(compare func(first, second T) bool) Enumerable[T] {
	dst := make([]T, len(src))
	copy(dst, src)
	sort.SliceStable(dst, func(i, j int) bool {
		return compare(dst[i], dst[j])
	})
	return dst
}

func (src Enumerable[T]) Last() (T, bool) {
	var dflt T
	if len(src) == 0 {
		return dflt, false
	}
	return src[len(src)-1], true
}

func (src Enumerable[T]) Distinct(keySelector func(item T) any) Enumerable[T] {
	keyMap := make(map[any]struct{})
	dst := make([]T, 0, len(src))

	for _, i := range src {
		key := keySelector(i)
		if _, exist := keyMap[key]; !exist {
			keyMap[key] = struct{}{}
			dst = append(dst, i)
		}
	}

	return dst
}
