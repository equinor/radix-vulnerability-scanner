package generic

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_OrderBy(t *testing.T) {
	chars := []string{"a", "c", "b", "b"}

	original := AsEnumerable(chars)
	sorted := original.OrderBy(func(first, second string) bool { return second > first })
	assert.Equal(t, AsEnumerable([]string{"a", "b", "b", "c"}), sorted)
	assert.Equal(t, AsEnumerable([]string{"a", "c", "b", "b"}), original)

	assert.NotPanics(t, func() {
		original := AsEnumerable[string](nil)
		original.OrderBy(func(first, second string) bool { return second > first })
	})
}

func Test_Last(t *testing.T) {
	ints := []int{5, 7, 6}

	original := AsEnumerable(ints)
	last, ok := original.Last()
	assert.True(t, ok)
	assert.Equal(t, 6, last)

	original = AsEnumerable[int](nil)
	_, ok = original.Last()
	assert.False(t, ok)
}

func Test_Distinct(t *testing.T) {
	ints := []int{1, 3, 5, 3, 3, 4, 1, 6}

	originalInts := AsEnumerable(ints)
	actualInts := originalInts.Distinct(func(item int) any { return item })
	assert.ElementsMatch(t, AsEnumerable([]int{1, 3, 4, 5, 6}), actualInts)

	type baz struct {
		foo string
		bar string
	}
	bazList := []baz{{foo: "foo1", bar: "bar1-1"}, {foo: "foo1", bar: "bar1-2"}, {foo: "foo2", bar: "bar2"}, {foo: "foo3", bar: "bar3"}}
	originalBaz := AsEnumerable(bazList)
	actualBaz := originalBaz.Distinct(func(item baz) any { return item.foo })
	assert.ElementsMatch(t, AsEnumerable([]baz{{foo: "foo1", bar: "bar1-1"}, {foo: "foo2", bar: "bar2"}, {foo: "foo3", bar: "bar3"}}), actualBaz)
}
