package generic

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_OrderBy(t *testing.T) {
	chars := []string{"a", "c", "b", "b"}

	original := AsEnumerable(chars)
	sorted := original.OrderBy(func(first, second string) bool { return second > first })
	assert.Equal(t, AsEnumerable([]string{"a", "b", "b", "c"}), sorted)
	assert.Equal(t, AsEnumerable([]string{"a", "c", "b", "b"}), original)

	assert.NotPanics(t, func() {
		original := AsEnumerable[string](nil)
		original.OrderBy(func(first, second string) bool { return second > first })
	})
}

func Test_First(t *testing.T) {
	ints := []int{5, 7, 6}

	original := AsEnumerable(ints)
	first, ok := original.First()
	assert.True(t, ok)
	assert.Equal(t, 5, first)

	original = AsEnumerable[int](nil)
	first, ok = original.First()
	assert.False(t, ok)
}

func Test_Last(t *testing.T) {
	ints := []int{5, 7, 6}

	original := AsEnumerable(ints)
	last, ok := original.Last()
	assert.True(t, ok)
	assert.Equal(t, 6, last)

	original = AsEnumerable[int](nil)
	last, ok = original.Last()
	assert.False(t, ok)
}
