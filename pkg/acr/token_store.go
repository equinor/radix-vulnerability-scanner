package acr

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
)

type ExchangeTokenResponse struct {
	RefreshToken string `json:"refresh_token"`
}

type TokenStore struct {
	Credential *azidentity.DefaultAzureCredential
}

func NewTokenStore() (*TokenStore, error) {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		return nil, err
	}
	return &TokenStore{Credential: cred}, nil
}

func (t *TokenStore) GetRefreshToken(ctx context.Context, registryName string) (string, error) {

	// valid for 86minutes / 5169sec
	token, err := t.Credential.GetToken(ctx, policy.TokenRequestOptions{Scopes: []string{
		"https://containerregistry.azure.net/.default",
	}})
	if err != nil {
		return "", err
	}

	// valid for 11700 sec / 195min / 3,25hours
	return exchangeTokenWithRefreshToken(registryName, token)
}

func exchangeTokenWithRefreshToken(registryName string, token azcore.AccessToken) (string, error) {
	formData := url.Values{}
	formData.Set("grant_type", "access_token")
	formData.Set("service", registryName)
	formData.Set("access_token", token.Token)
	body := strings.NewReader(formData.Encode())

	exchangeUrl := fmt.Sprintf("https://%s/oauth2/exchange", registryName)
	res, err := http.DefaultClient.Post(exchangeUrl, "application/x-www-form-urlencoded", body)
	if err != nil {
		return "", err
	}
	defer res.Body.Close()

	if !runtime.HasStatusCode(res, http.StatusOK) {
		err = runtime.NewResponseError(res)
		return "", err
	}

	bytes, err := io.ReadAll(res.Body)
	if err != nil {
		return "", err
	}

	var resToken ExchangeTokenResponse
	err = json.Unmarshal(bytes, &resToken)

	return resToken.RefreshToken, err
}
