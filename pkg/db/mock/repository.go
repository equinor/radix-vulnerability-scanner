// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/db/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	db "github.com/equinor/radix-vulnerability-scanner/pkg/db"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetLastImageScan mocks base method.
func (m *MockRepository) GetLastImageScan(ctx context.Context, image string) (*db.ImageScanDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastImageScan", ctx, image)
	ret0, _ := ret[0].(*db.ImageScanDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastImageScan indicates an expected call of GetLastImageScan.
func (mr *MockRepositoryMockRecorder) GetLastImageScan(ctx, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastImageScan", reflect.TypeOf((*MockRepository)(nil).GetLastImageScan), ctx, image)
}

// RegisterImageScan mocks base method.
func (m *MockRepository) RegisterImageScan(ctx context.Context, image string, baseImage *string, scanTime time.Time, success bool, vulnerabilities []db.VulnerabilityBulkDto, identifiers []db.VulnerabilityIdentifierBulkDto, references []db.VulnerabilityReferenceBulkDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterImageScan", ctx, image, baseImage, scanTime, success, vulnerabilities, identifiers, references)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterImageScan indicates an expected call of RegisterImageScan.
func (mr *MockRepositoryMockRecorder) RegisterImageScan(ctx, image, baseImage, scanTime, success, vulnerabilities, identifiers, references interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterImageScan", reflect.TypeOf((*MockRepository)(nil).RegisterImageScan), ctx, image, baseImage, scanTime, success, vulnerabilities, identifiers, references)
}
