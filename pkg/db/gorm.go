package db

import (
	"context"

	"github.com/equinor/radix-vulnerability-scanner/pkg/generic"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

type gormRepository struct {
	db *gorm.DB
}

func NewGormRepository(db *gorm.DB) Repository {
	return &gormRepository{
		db: db,
	}
}

func (r *gormRepository) GetLastScan(ctx context.Context, image string) (*ImageScanDto, error) {
	var obj ImageDto
	tx := r.db.WithContext(ctx).Where(&ImageDto{Name: image}).Preload(clause.Associations).First(&obj)
	if tx.RowsAffected == 0 || len(obj.Scans) == 0 {
		return nil, tx.Error
	}
	last, ok := generic.AsEnumerable(obj.Scans).
		OrderBy(func(first, second ImageScanDto) bool { return second.ScanTime.After(first.ScanTime) }).
		Last()
	if !ok {
		return nil, nil
	}

	return &last, nil

}

func (r *gormRepository) AddScan(ctx context.Context, image string, scan *ImageScanDto) error {
	img := ImageDto{Name: image}

	tx := r.db.WithContext(ctx).Create(&img)
	return tx.Error
}
