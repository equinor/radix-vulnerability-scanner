package db

import (
	"context"
	"database/sql"
	"time"

	mssql "github.com/denisenkom/go-mssqldb"
	"github.com/equinor/radix-vulnerability-scanner/pkg/generic"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

const vulnerabilityBulkTypeTvpName = "dbo.VulnerabilityBulkType"
const vulnerabilityIdentifierBulkTypeTvpName = "dbo.VulnerabilityIdentifiersBulkType"
const vulnerabilityReferenceBulkTypeTvpName = "dbo.VulnerabilityReferencesBulkType"

type gormRepository struct {
	db *gorm.DB
}

func NewGormRepository(db *gorm.DB) Repository {
	return &gormRepository{
		db: db,
	}
}

func (r *gormRepository) GetLastImageScan(ctx context.Context, image string) (*ImageScanDto, error) {
	var obj ImageDto
	err := r.db.
		WithContext(ctx).
		Where(&ImageDto{Name: image}).
		Preload(clause.Associations).
		First(&obj).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, nil
		}

		return nil, err
	}

	last, ok := generic.
		AsEnumerable(obj.Scans).
		OrderBy(func(first, second ImageScanDto) bool { return second.ScanTime.After(first.ScanTime) }).
		Last()
	if !ok {
		return nil, nil
	}

	return &last, nil
}

func (r *gormRepository) RegisterImageScan(ctx context.Context, image string, baseImage *string, scanTime time.Time, success bool, vulnerabilities []VulnerabilityBulkDto, identifiers []VulnerabilityIdentifierBulkDto, references []VulnerabilityReferenceBulkDto) error {
	return r.db.WithContext(ctx).Transaction(func(tx *gorm.DB) error {
		// Parameters must be in the same order as defined in the stored procedure.
		// SQL Server parameters are prefixed with @, the same prefix used by GORM,
		// which makes it impossible to use named parameters, e.g. dbo.MySproc @Param=@ParamVal
		return tx.Exec("dbo.Image_RegisterScan @ImageName, @ScanTime, @ScanSuccess, @Vulnerabilities, @Identifiers, @References, @BaseImage",
			sql.Named("ImageName", image),
			sql.Named("ScanTime", scanTime),
			sql.Named("ScanSuccess", success),
			sql.Named("Vulnerabilities", mssql.TVP{TypeName: vulnerabilityBulkTypeTvpName, Value: vulnerabilities}),
			sql.Named("Identifiers", mssql.TVP{TypeName: vulnerabilityIdentifierBulkTypeTvpName, Value: identifiers}),
			sql.Named("References", mssql.TVP{TypeName: vulnerabilityReferenceBulkTypeTvpName, Value: references}),
			sql.Named("BaseImage", baseImage),
		).Error
	})
}
