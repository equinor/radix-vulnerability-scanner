package db

import (
	"context"
	"fmt"
	"time"

	commongorm "github.com/equinor/radix-common/pkg/gorm"
	"github.com/equinor/radix-vulnerability-scanner/pkg/options"
	"github.com/microsoft/go-mssqldb/azuread"
	"gorm.io/driver/sqlserver"
	"gorm.io/gorm"
	"gorm.io/gorm/schema"
)

// Repository defines methods for reading and storing data about vulnerability scans
type Repository interface {
	// GetLastImageScan returns the last vulnerability scan for an image
	GetLastImageScan(ctx context.Context, image string) (*ImageScanDto, error)
	// RegisterImageScan stores information about a vulnerability scan for an image
	RegisterImageScan(ctx context.Context, image string, baseImage *string, scanTime time.Time, success bool, vulnerabilities []VulnerabilityBulkDto, identifiers []VulnerabilityIdentifierBulkDto, references []VulnerabilityReferenceBulkDto) error
}

func New(opts *options.DBOptions) (Repository, error) {

	dsn := fmt.Sprintf("server=%s;database=%s;fedauth=ActiveDirectoryDefault", opts.Server, opts.Database)
	dialector := sqlserver.New(sqlserver.Config{
		DriverName: azuread.DriverName,
		DSN:        dsn,
	})

	gormdb, err := gorm.Open(dialector, &gorm.Config{
		NamingStrategy:       schema.NamingStrategy{NoLowerCase: true},
		Logger:               commongorm.NewLogger(),
		DisableAutomaticPing: false,
	})
	if err != nil {
		return nil, err
	}

	return NewGormRepository(gormdb), nil
}
