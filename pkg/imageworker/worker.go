package imageworker

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/equinor/radix-vulnerability-scanner/pkg/handler"
	"github.com/equinor/radix-vulnerability-scanner/pkg/observe"
	"github.com/equinor/radix-vulnerability-scanner/pkg/utils"
	logger "github.com/sirupsen/logrus"
	"k8s.io/client-go/util/workqueue"
)

var maxNumberOfRequeues = 5
var fastRateLimitDelay = 30 * time.Second
var maxFastAttempts = 2
var slowRateLimitDelay = 2 * time.Minute

var _ observe.Observer[string] = &Worker{}

type (
	Worker struct {
		queue     workqueue.RateLimitingInterface
		handler   handler.Handler[string]
		running   bool
		runningMu sync.Mutex
	}
)

func New(handler handler.Handler[string]) *Worker {
	return &Worker{
		queue:   workqueue.NewRateLimitingQueue(workqueue.NewItemFastSlowRateLimiter(fastRateLimitDelay, slowRateLimitDelay, maxFastAttempts)),
		handler: handler,
	}
}

func (w *Worker) Receive(obj string) {
	logger.Debugf("enqueuing image %v", obj)
	w.queue.Add(obj)
}

func (w *Worker) Start(workers uint, stop <-chan struct{}) error {
	w.runningMu.Lock()
	defer w.runningMu.Unlock()
	if w.running {
		return errors.New("image processor already running")
	}

	w.running = true
	go func() {
		<-stop
		w.running = false
	}()

	for i := uint(0); i < workers; i++ {
		go func(id uint) {
			w.worker(id, stop)
		}(i)
	}

	return nil
}

func (w *Worker) worker(id uint, stop <-chan struct{}) {
	ctx, cancel := utils.ContextForChannel(stop)
	defer cancel()

	for w.processNextItem(ctx) {
	}
}

func (w *Worker) processNextItem(ctx context.Context) bool {
	item, shutdown := w.queue.Get()
	if shutdown {
		return false
	}

	err := func(item any) error {
		defer w.queue.Done(item)

		if image, ok := item.(string); ok {
			logger.Infof("processing image %v", image)
			if err := w.handler.Handle(ctx, image); err != nil {
				requeues := w.queue.NumRequeues(image)
				if requeues < maxNumberOfRequeues {
					logger.Infof("requeuing scan of image %v (attempt %d of %d) due to error: %v", image, requeues+1, maxNumberOfRequeues, err)
					w.queue.AddRateLimited(item)
					return nil
				} else {
					w.queue.Forget(item)
					return fmt.Errorf("scan failed for image %v after %d retries: %v", image, requeues, err)
				}
			}
		}

		w.queue.Forget(item)
		return nil
	}(item)

	if err != nil {
		logger.Errorf("error processing image %v: %v", item, err)
	}

	return true
}
