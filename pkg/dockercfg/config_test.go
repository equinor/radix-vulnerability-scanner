package dockercfg_test

import (
	"testing"

	"github.com/equinor/radix-vulnerability-scanner/pkg/dockercfg"
	"github.com/equinor/radix-vulnerability-scanner/pkg/dockercfg/mock"
	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestGetAuthValid(t *testing.T) {
	cfg := dockercfg.New().AddAuth("anyregistry.io", "admin", "password")
	auth, err := cfg.GetAuth("anyregistry.io/anyimage:anytag", nil)
	require.NoError(t, err)

	assert.Equal(t, "admin", auth.Username)
	assert.Equal(t, "password", auth.Password)
}

func TestMissingGetAuthIsEmpty(t *testing.T) {
	auth, err := dockercfg.New().GetAuth("anyregistry.io/anyimage:anytag", nil)
	require.NoError(t, err)

	assert.Equal(t, "", auth.Username)
	assert.Equal(t, "", auth.Password)
}

func TestGetAuth_InvalidImageErrors(t *testing.T) {
	_, err := dockercfg.New().GetAuth("anyregistry.io/:anytag", nil)
	assert.ErrorContains(t, err, "invalid reference format")
}
func TestGetAuth_CredHelpersHappyPath(t *testing.T) {
	ctrl := gomock.NewController(t)
	ts := mock.NewMockTokenner(ctrl)
	ts.EXPECT().Token("anyregistry.io").Return("abcd.abcd.abcd", nil).Times(1)
	config := dockercfg.New().AddCredHelper("anyregistry.io", "radix-wi-env")

	auth, err := config.GetAuth("anyregistry.io/anyimage:anytag", ts)

	require.NoError(t, err)
	assert.Equal(t, "00000000-0000-0000-0000-000000000000", auth.Username)
	assert.Equal(t, "abcd.abcd.abcd", auth.Password)
}
func TestGetAuth_CredHelpersUnknownRegistry(t *testing.T) {
	ctrl := gomock.NewController(t)
	ts := mock.NewMockTokenner(ctrl)
	config := dockercfg.New().AddCredHelper("anyregistry.io", "radix-wi-env")

	auth, err := config.GetAuth("anyOTHERregistry.io/anyimage:anytag", ts)
	require.NoError(t, err)
	assert.Equal(t, "", auth.Username)
	assert.Equal(t, "", auth.Password)
}
