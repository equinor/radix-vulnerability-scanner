package dockercfg

import (
	"encoding/json"
	"errors"
	"fmt"
	"os"

	"github.com/containerd/containerd/reference/docker"
	"github.com/equinor/radix-vulnerability-scanner/pkg/tokenstore"
	"github.com/rs/zerolog/log"
)

var (
	errNotImplemented = fmt.Errorf("docker credential helper is not implemented")
)

type DockerConfig struct {
	Auths       DockerAuthConfig      `json:"auths"`
	CredHelpers CredHelperConfigEntry `json:"credHelpers"`
}

// DockerAuthConfig defines a map of registry names and authentication information
type DockerAuthConfig map[string]DockerAuthConfigEntry

// CredHelperConfigEntry contains name of docker-credential helper to fetch jwt for a docker registry
type CredHelperConfigEntry map[string]string

// DockerAuthConfigEntry contains username and password for a docker registry
type DockerAuthConfigEntry struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// ReadDockerAuthConfigFromFile attempts to read docker configJSON from a given file path.
func ReadDockerAuthConfigFromFile(filePath string) (cfg DockerConfig, err error) {
	var contents []byte

	if contents, err = os.ReadFile(filePath); err != nil {
		return DockerConfig{}, err
	}
	return ReadDockerAuthConfigFromBytes(contents)
}

// ReadDockerAuthConfigFromBytes attempts to unmarshal a slice of bytes to a DockerConfig.
func ReadDockerAuthConfigFromBytes(contents []byte) (DockerConfig, error) {
	var cfgJSON DockerConfig
	if err := json.Unmarshal(contents, &cfgJSON); err != nil {
		return DockerConfig{}, errors.New("error occurred while trying to unmarshal json")
	}
	return cfgJSON, nil
}

func (c DockerConfig) GetAuth(image string, tokenStore *tokenstore.TokenStore) (DockerAuthConfigEntry, error) {
	named, err := docker.ParseDockerRef(image)
	if err != nil {
		return DockerAuthConfigEntry{}, err
	}
	registry := docker.Domain(named)

	if len(c.Auths) > 0 {
		if auth, found := c.Auths[registry]; found {
			return auth, nil
		}
	}

	if len(c.CredHelpers) > 0 {
		if helper, found := c.CredHelpers[registry]; found {
			if helper == "radix-wi-env" && tokenStore != nil {
				log.Debug().Msg("Using radix-wi-env helper")
				token, err := tokenStore.GetToken(registry)
				if err != nil {
					return DockerAuthConfigEntry{}, err
				}

				return DockerAuthConfigEntry{
					Username: "00000000-0000-0000-0000-000000000000",
					Password: token,
				}, nil
			}

			return DockerAuthConfigEntry{}, fmt.Errorf("%w: helper %s is not implemented", errNotImplemented, helper)
		}
	}

	return DockerAuthConfigEntry{}, nil
}
