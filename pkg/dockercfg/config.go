package dockercfg

import (
	"context"
	"encoding/json"
	"errors"
	"os"

	"github.com/containerd/containerd/reference/docker"
	"github.com/equinor/radix-vulnerability-scanner/pkg/registry"
)

// var (
// 	errNotImplemented = fmt.Errorf("docker credential helper is not implemented")
// )

// Tokenner defines methods for retrieving tokens for a registry
type Tokenner interface {
	// Token returns a token for a registry
	Token(string) (string, error)
}

type DockerConfig struct {
	Auths       DockerAuthConfig      `json:"auths"`
	CredHelpers CredHelperConfigEntry `json:"credHelpers"`
}

// DockerAuthConfig defines a map of registry names and authentication information
type DockerAuthConfig map[string]DockerAuthConfigEntry

// CredHelperConfigEntry contains name of docker-credential helper to fetch jwt for a docker registry
type CredHelperConfigEntry map[string]string

// DockerAuthConfigEntry contains username and password for a docker registry
type DockerAuthConfigEntry struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func New() *DockerConfig {
	return &DockerConfig{}
}

// NewFromFile attempts to read docker configJSON from a given file path.
func NewFromFile(filePath string) (cfg *DockerConfig, err error) {
	var contents []byte

	if contents, err = os.ReadFile(filePath); err != nil {
		return nil, err
	}
	return NewFromBytes(contents)
}

// NewFromBytes attempts to unmarshal a slice of bytes to a DockerConfig.
func NewFromBytes(contents []byte) (*DockerConfig, error) {
	var cfgJSON DockerConfig
	if err := json.Unmarshal(contents, &cfgJSON); err != nil {
		return nil, errors.New("error occurred while trying to unmarshal json")
	}
	return &cfgJSON, nil
}

func (c *DockerConfig) AddAuth(registry, username, password string) *DockerConfig {
	if c.Auths == nil {
		c.Auths = map[string]DockerAuthConfigEntry{}
	}

	c.Auths[registry] = DockerAuthConfigEntry{Username: username, Password: password}
	return c
}
func (c *DockerConfig) AddCredHelper(registry, helper string) *DockerConfig {
	if c.CredHelpers == nil {
		c.CredHelpers = map[string]string{}
	}

	c.CredHelpers[registry] = helper
	return c
}

func (c *DockerConfig) GetAuth(_ context.Context, image string) (*registry.Auth, error) {
	named, err := docker.ParseDockerRef(image)
	if err != nil {
		return nil, err
	}
	registryName := docker.Domain(named)

	if len(c.Auths) > 0 {
		if auth, found := c.Auths[registryName]; found {
			return &registry.Auth{Username: auth.Username, Password: auth.Password}, nil
		}
	}

	return nil, nil
}

// func (c *DockerConfig) GetAuthDeprecated(image string, tokenStore Tokenner) (DockerAuthConfigEntry, error) {
// 	named, err := docker.ParseDockerRef(image)
// 	if err != nil {
// 		return DockerAuthConfigEntry{}, err
// 	}
// 	registry := docker.Domain(named)

// 	if len(c.Auths) > 0 {
// 		if auth, found := c.Auths[registry]; found {
// 			return auth, nil
// 		}
// 	}

// 	if len(c.CredHelpers) > 0 {
// 		if helper, found := c.CredHelpers[registry]; found {
// 			if helper == "radix-wi-env" && tokenStore != nil {
// 				log.Debug().Msg("Using radix-wi-env helper")
// 				token, err := tokenStore.Token(registry)
// 				if err != nil {
// 					return DockerAuthConfigEntry{}, err
// 				}

// 				return DockerAuthConfigEntry{
// 					Username: "00000000-0000-0000-0000-000000000000",
// 					Password: token,
// 				}, nil
// 			}

// 			return DockerAuthConfigEntry{}, fmt.Errorf("%w: helper %s is not implemented", errNotImplemented, helper)
// 		}
// 	}

// 	return DockerAuthConfigEntry{}, nil
// }
