package tokenstore

import (
	"context"
	"errors"
	"slices"

	"github.com/containerd/containerd/reference/docker"
	"github.com/equinor/radix-vulnerability-scanner/pkg/registry"
)

func AuthProviderAdapter(tokenStore *TokenStore, registryAllowlist []string) registry.AuthProvider {
	if tokenStore == nil {
		panic(errors.New("tokenStore cannot be nil"))
	}
	return &authProviderAdapter{tokenStore: tokenStore, registryAllowlist: registryAllowlist}
}

type authProviderAdapter struct {
	tokenStore        *TokenStore
	registryAllowlist []string
}

func (a *authProviderAdapter) GetAuth(ctx context.Context, image string) (*registry.Auth, error) {
	named, err := docker.ParseDockerRef(image)
	if err != nil {
		return nil, err
	}

	registryName := docker.Domain(named)
	if !a.isAllowedRegistry(registryName) {
		return nil, nil
	}

	token, err := a.tokenStore.Token(ctx, registryName)
	if err != nil {
		return nil, err
	}

	return &registry.Auth{Username: "00000000-0000-0000-0000-000000000000", Password: token}, nil
}

func (a *authProviderAdapter) isAllowedRegistry(registry string) bool {
	if len(a.registryAllowlist) == 0 {
		return true
	}
	return slices.Contains(a.registryAllowlist, registry)
}
