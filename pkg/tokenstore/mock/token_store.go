// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/tokenstore/token_store.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFormPoster is a mock of FormPoster interface.
type MockFormPoster struct {
	ctrl     *gomock.Controller
	recorder *MockFormPosterMockRecorder
}

// MockFormPosterMockRecorder is the mock recorder for MockFormPoster.
type MockFormPosterMockRecorder struct {
	mock *MockFormPoster
}

// NewMockFormPoster creates a new mock instance.
func NewMockFormPoster(ctrl *gomock.Controller) *MockFormPoster {
	mock := &MockFormPoster{ctrl: ctrl}
	mock.recorder = &MockFormPosterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFormPoster) EXPECT() *MockFormPosterMockRecorder {
	return m.recorder
}

// PostForm mocks base method.
func (m *MockFormPoster) PostForm(url string, data url.Values) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostForm", url, data)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostForm indicates an expected call of PostForm.
func (mr *MockFormPosterMockRecorder) PostForm(url, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostForm", reflect.TypeOf((*MockFormPoster)(nil).PostForm), url, data)
}
