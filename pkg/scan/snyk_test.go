package scan

import (
	"context"
	"encoding/json"
	"errors"
	"io"
	"testing"

	"github.com/equinor/radix-common/utils"
	"github.com/equinor/radix-vulnerability-scanner/pkg/dockercfg"
	"github.com/equinor/radix-vulnerability-scanner/pkg/registry"
	authprovidermock "github.com/equinor/radix-vulnerability-scanner/pkg/registry/mock"
	executormock "github.com/equinor/radix-vulnerability-scanner/pkg/scan/executor/mock"
	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
)

var emptyObj = struct{}{}

type SnykTestSuite struct {
	suite.Suite
	executor     *executormock.MockExecutor
	authprovider *authprovidermock.MockAuthProvider
	ctrl         *gomock.Controller
}

func (s *SnykTestSuite) SetupSuite() {
	s.ctrl = gomock.NewController(s.T())
	s.executor = executormock.NewMockExecutor(s.ctrl)
	s.authprovider = authprovidermock.NewMockAuthProvider(s.ctrl)
}
func Test_SnykTestSuite(t *testing.T) {
	suite.Run(t, new(SnykTestSuite))
}

func (s *SnykTestSuite) Test_NewSnyk() {
	sut := NewSnykScanner(s.executor)

	assert.IsType(s.T(), &SnykScanner{}, sut)
}

func (s *SnykTestSuite) Test_SnykScanImageWithCommonAuthEntry() {
	s.authprovider.EXPECT().GetAuth(gomock.Any(), "my.registry.com/image:tag").Return(&registry.Auth{Username: "reguser", Password: "regpwd"}, nil).Times(1)
	expectedArgs := []string{"container", "test", "--json", "my.registry.com/image:tag", "--username=reguser", "--password=regpwd"}
	s.executor.EXPECT().
		Execute(gomock.Any(), "snyk", expectedArgs, gomock.Any()).
		Do(s.fakeWriter(emptyObj)).
		Return(nil).
		Times(1)

	sut := NewSnykScanner(s.executor, WithAuthProvider(s.authprovider))

	_, err := sut.Scan(context.Background(), "my.registry.com/image:tag", "", dockercfg.Config{})
	assert.NoError(s.T(), err)
}

func (s *SnykTestSuite) Test_SnykScanImageWithNoCommonAuthEntryButWithArgumentAuth() {
	expectedArgs := []string{"container", "test", "--json", "my.registry.com/image:tag", "--username=anotheruser", "--password=anotherpwd"}
	s.executor.EXPECT().
		Execute(gomock.Any(), "snyk", expectedArgs, gomock.Any()).
		Do(s.fakeWriter(emptyObj)).
		Return(nil).
		Times(1)
	sut := NewSnykScanner(s.executor, WithAuthProvider(dockercfg.Config{}))

	extraCfg := &dockercfg.Config{Auths: dockercfg.AuthMap{"my.registry.com": {Username: "anotheruser", Password: "anotherpwd"}}}
	_, actualErr := sut.Scan(context.Background(), "my.registry.com/image:tag", "", *extraCfg)
	assert.NoError(s.T(), actualErr)
}

func (s *SnykTestSuite) Test_SnykScanImageAuthArgFailsShouldRetryWithoutAuth() {
	dockerCfg := dockercfg.Config{}

	expectedArgsWithAuth := []string{"container", "test", "--json", "my.registry.com/image:tag", "--username=anotheruser", "--password=anotherpwd"}
	s.executor.EXPECT().Execute(gomock.Any(), "snyk", expectedArgsWithAuth, gomock.Any()).Return(errors.New("any error")).Times(1)

	expectedArgsWithoutAuth := []string{"container", "test", "--json", "my.registry.com/image:tag"}
	s.executor.EXPECT().Execute(gomock.Any(), "snyk", expectedArgsWithoutAuth, gomock.Any()).Do(s.fakeWriter(emptyObj)).Return(nil).Times(1)

	sut := NewSnykScanner(s.executor, WithAuthProvider(dockerCfg))
	extraConfig := dockercfg.Config{Auths: dockercfg.AuthMap{"my.registry.com": {Username: "anotheruser", Password: "anotherpwd"}}}
	_, actualErr := sut.Scan(context.Background(), "my.registry.com/image:tag", "", extraConfig)
	s.NoError(actualErr)
}

func (s *SnykTestSuite) Test_SnykScanImageWithNoAuthEntry() {
	dockerCfg := dockercfg.Config{Auths: dockercfg.AuthMap{"another.registry.com": {Username: "someuser", Password: "somepwd"}}}
	expectedArgs := []string{"container", "test", "--json", "my.registry.com/image:tag"}
	s.executor.EXPECT().Execute(gomock.Any(), "snyk", expectedArgs, gomock.Any()).Do(s.fakeWriter(emptyObj)).Return(nil).Times(1)
	sut := NewSnykScanner(s.executor, WithAuthProvider(dockerCfg))

	_, actualErr := sut.Scan(context.Background(), "my.registry.com/image:tag", "", dockercfg.Config{})

	s.NoError(actualErr)
}

func (s *SnykTestSuite) Test_SnykScanImageWithPlatform() {
	dockerCfg := dockercfg.Config{Auths: dockercfg.AuthMap{"another.registry.com": {Username: "someuser", Password: "somepwd"}}}
	expectedArgs := []string{"container", "test", "--json", "my.registry.com/image:tag", "--platform=anyplatformarg"}
	s.executor.EXPECT().Execute(gomock.Any(), "snyk", expectedArgs, gomock.Any()).Do(s.fakeWriter(emptyObj)).Return(nil).Times(1)
	sut := NewSnykScanner(s.executor, WithAuthProvider(dockerCfg))

	_, actualErr := sut.Scan(context.Background(), "my.registry.com/image:tag", "anyplatformarg", dockercfg.Config{})

	s.NoError(actualErr)
}

func (s *SnykTestSuite) Test_SnykScanImageWithInvalidImageStringReturnsError() {
	dockerCfg := dockercfg.Config{Auths: dockercfg.AuthMap{"any.registry.com": {Username: "someuser", Password: "somepwd"}}}
	s.executor.EXPECT().Execute(gomock.Any(), "snyk", gomock.Any(), gomock.Any()).Times(0)
	sut := NewSnykScanner(s.executor, WithAuthProvider(dockerCfg))
	_, actualErr := sut.Scan(context.Background(), "my.registry.com/:image:tag", "", dockercfg.Config{})

	s.Error(actualErr)
}

func (s *SnykTestSuite) Test_SnykScanErrorFromExecutorReturned() {
	dockerCfg := dockercfg.Config{}
	expectedErr := errors.New("any error")
	s.executor.EXPECT().Execute(gomock.Any(), "snyk", gomock.Any(), gomock.Any()).Return(expectedErr).Times(1)
	sut := NewSnykScanner(s.executor, WithAuthProvider(dockerCfg))
	_, actualErr := sut.Scan(context.Background(), "my.registry.com/image:test", "", dockercfg.Config{})
	s.ErrorIs(expectedErr, actualErr)
}

func (s *SnykTestSuite) Test_SnykScanStdOutFromExecutorUnmarshalled() {
	dockerCfg := dockercfg.Config{}
	expectedResults := ScanResult{
		Docker:          DockerInfo{BaseImage: utils.StringPtr("base")},
		Vulnerabilities: []Vulnerability{{Id: "id1"}},
	}

	s.executor.EXPECT().Execute(gomock.Any(), "snyk", gomock.Any(), gomock.Any()).Do(s.fakeWriter(expectedResults)).Return(nil).Times(1)

	sut := NewSnykScanner(s.executor, WithAuthProvider(dockerCfg))
	actualScanResult, actualErr := sut.Scan(context.Background(), "my.registry.com/image:test", "", dockercfg.Config{})
	s.NoError(actualErr)
	s.Equal(expectedResults, *actualScanResult)
}

func (s *SnykTestSuite) fakeWriter(content any) func(_ context.Context, _ string, _ []string, w io.Writer) {
	return func(_ context.Context, _ string, _ []string, w io.Writer) {
		resultBytes, err := json.Marshal(&content)
		s.Require().NoError(err)
		_, err = w.Write(resultBytes)
		s.Require().NoError(err)
	}
}
