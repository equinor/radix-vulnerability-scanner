// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/scan/scanner.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dockercfg "github.com/equinor/radix-vulnerability-scanner/pkg/dockercfg"
	scan "github.com/equinor/radix-vulnerability-scanner/pkg/scan"
	gomock "github.com/golang/mock/gomock"
)

// MockScanner is a mock of Scanner interface.
type MockScanner struct {
	ctrl     *gomock.Controller
	recorder *MockScannerMockRecorder
}

// MockScannerMockRecorder is the mock recorder for MockScanner.
type MockScannerMockRecorder struct {
	mock *MockScanner
}

// NewMockScanner creates a new mock instance.
func NewMockScanner(ctrl *gomock.Controller) *MockScanner {
	mock := &MockScanner{ctrl: ctrl}
	mock.recorder = &MockScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScanner) EXPECT() *MockScannerMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockScanner) Scan(ctx context.Context, image string, auth dockercfg.DockerAuthConfig) (*scan.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", ctx, image, auth)
	ret0, _ := ret[0].(*scan.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockScannerMockRecorder) Scan(ctx, image, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockScanner)(nil).Scan), ctx, image, auth)
}
