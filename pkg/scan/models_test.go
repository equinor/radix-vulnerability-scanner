package scan

import (
	"encoding/json"
	"testing"
	"time"

	"github.com/equinor/radix-common/utils"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_ModelMarshalUnmarshal(t *testing.T) {
	floatPtr := func(v float32) *float32 {
		return &v
	}
	expectedModel := ScanResult{
		Docker: DockerInfo{BaseImage: utils.StringPtr("base")},
		Vulnerabilities: []Vulnerability{
			{
				Id:          "id",
				Title:       "title",
				PackageName: "pgk",
				Version:     "ver",
				Description: "desc",
				Severity:    "severity",
				CVSS:        floatPtr(1),
				CVSSv3:      "v3",
				Identifiers: map[string][]string{"CVE": {"cve1"}},
				References:  []References{{URL: "ref1"}},
			},
		},
	}
	modelBytes, err := json.Marshal(expectedModel)
	require.NoError(t, err)
	var actualModel ScanResult
	json.Unmarshal(modelBytes, &actualModel)
	assert.Equal(t, expectedModel, actualModel)
}

func Test_ModelMarshalUnmarshalTimeFields(t *testing.T) {
	timePtr := func(v time.Time) *time.Time {
		return &v
	}
	expectedModel := ScanResult{
		Vulnerabilities: []Vulnerability{
			{
				CreationTime:     time.Now(),
				ModificationTime: time.Now().Add(1 * time.Minute),
				PublicationTime:  time.Now().Add(2 * time.Minute),
				DisclosureTime:   timePtr(time.Now().Add(3 * time.Minute)),
			},
		},
	}
	modelBytes, err := json.Marshal(expectedModel)
	require.NoError(t, err)
	var actualModel ScanResult
	json.Unmarshal(modelBytes, &actualModel)
	assert.WithinDuration(t, expectedModel.Vulnerabilities[0].CreationTime, actualModel.Vulnerabilities[0].CreationTime, 0)
	assert.WithinDuration(t, expectedModel.Vulnerabilities[0].ModificationTime, actualModel.Vulnerabilities[0].ModificationTime, 0)
	assert.WithinDuration(t, expectedModel.Vulnerabilities[0].PublicationTime, actualModel.Vulnerabilities[0].PublicationTime, 0)
	assert.WithinDuration(t, *expectedModel.Vulnerabilities[0].DisclosureTime, *actualModel.Vulnerabilities[0].DisclosureTime, 0)
}
