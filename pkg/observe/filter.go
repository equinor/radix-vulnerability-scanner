package observe

import (
	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	"k8s.io/utils/strings/slices"
)

var _ SubjectAndObserver[any, any] = &Filter[any]{}

// var _ FilterPredicate[string] = &recentlyScannedContainerPredicate{}

type (
	//FilterPredicate
	FilterPredicate[T any] interface {
		Filter(obj T) bool
	}

	// FilterPredicateFunc type is an adapter to allow the use of
	// ordinary functions as FilterPredicate
	FilterPredicateFunc[T any] func(obj T) bool
)

type (
	// Filter implements Observer and Observable
	// Objectes received by the filter's observer implementation is filtered with the Condition function
	// before emitted by the filter's observable implementation
	Filter[T any] struct {
		Predicate FilterPredicate[T]
		subject[T]
	}

	RadixDeploymentFilter struct {
		Filter[*v1.RadixDeployment]
	}

	ContainerImageFilter struct {
		Filter[string]
	}
)

func (f FilterPredicateFunc[T]) Filter(obj T) bool {
	return f(obj)
}

func (f *Filter[T]) Receive(obj T) {

	if f.Predicate.Filter(obj) {
		f.NotifyObservers(obj)
	}
}

func ActiveRadixDeploymentFilter() *RadixDeploymentFilter {
	filter := &RadixDeploymentFilter{}
	filter.Predicate = FilterPredicateFunc[*v1.RadixDeployment](func(obj *v1.RadixDeployment) bool {
		return obj != nil && obj.Status.Condition == v1.DeploymentActive
	})
	return filter
}

func ExcludeRadixAppNamesFilter(excludeAppNames []string) *RadixDeploymentFilter {
	filter := &RadixDeploymentFilter{}
	filter.Predicate = FilterPredicateFunc[*v1.RadixDeployment](func(obj *v1.RadixDeployment) bool {
		return obj != nil && !slices.Contains(excludeAppNames, obj.Spec.AppName)
	})
	return filter
}
