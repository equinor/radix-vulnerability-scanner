package observe

import (
	"context"
	"time"

	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	"github.com/equinor/radix-vulnerability-scanner/pkg/db"
	"github.com/sirupsen/logrus"
)

var _ ObservableObserver[any, any] = &Filter[any]{}
var _ FilterPredicate[string] = &recentlyScannedContainerPredicate{}

type (
	//FilterPredicate
	FilterPredicate[T any] interface {
		Filter(obj T) bool
	}

	// FilterPredicateFunc type is an adapter to allow the use of
	// ordinary functions as FilterPredicate
	FilterPredicateFunc[T any] func(obj T) bool

	recentlyScannedContainerPredicate struct {
		logger     *logrus.Logger
		repo       db.Repository
		rootCtx    context.Context
		minScanAge time.Duration
	}
)

func (p *recentlyScannedContainerPredicate) Filter(image string) bool {
	ctx, cancel := context.WithTimeout(p.rootCtx, 10*time.Second)
	defer cancel()

	scanInfo, err := p.repo.GetLastImageScan(ctx, image)
	if err != nil {
		p.logger.Error(err)
		return false
	}
	if scanInfo == nil {
		p.logger.Debugf("Image %s never scanned", image)
		return true
	}

	scanAge := time.Since(scanInfo.ScanTime)
	p.logger.Debugf("Image %s scan age: %v", image, scanAge)
	return scanAge >= p.minScanAge
}

type (
	// Filter implements Observer and Observable
	// Objectes received by the filter's observer implementation is filtered with the Condition function
	// before emitted by the filter's observable implementation
	Filter[T any] struct {
		Predicate FilterPredicate[T]
		observable[T]
	}

	RadixDeploymentFilter struct {
		Filter[*v1.RadixDeployment]
	}

	ContainerImageFilter struct {
		Filter[string]
	}
)

func (f FilterPredicateFunc[T]) Filter(obj T) bool {
	return f(obj)
}

func (f *Filter[T]) OnNext(obj T) {
	if f.Predicate.Filter(obj) {
		f.notify(obj)
	}
}

func ActiveRadixDeploymentFilter() *RadixDeploymentFilter {
	filter := &RadixDeploymentFilter{}
	filter.Predicate = FilterPredicateFunc[*v1.RadixDeployment](func(obj *v1.RadixDeployment) bool {
		return obj != nil && obj.Status.Condition == v1.DeploymentActive
	})
	return filter
}

func ContainerImageScanAgeFilter(repo db.Repository, minScanAge time.Duration, rootCtx context.Context, logger *logrus.Logger) *ContainerImageFilter {
	predicate := &recentlyScannedContainerPredicate{
		repo:       repo,
		minScanAge: minScanAge,
		logger:     logrus.StandardLogger(),
		rootCtx:    rootCtx,
	}
	if logger != nil {
		predicate.logger = logger
	}

	filter := &ContainerImageFilter{}
	filter.Predicate = predicate

	return filter
}
