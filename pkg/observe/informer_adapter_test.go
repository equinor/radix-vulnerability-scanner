package observe

import (
	"testing"

	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	"github.com/equinor/radix-vulnerability-scanner/pkg/observe/fake"
	"github.com/stretchr/testify/assert"
)

func Test_SubjectToInformerEventAdapater(t *testing.T) {
	var receivedRd *v1.RadixDeployment
	subject := NewSubject[*v1.RadixDeployment]()
	fakeObserver := &fake.FakeRadixDeploymentObserver{OnReceive: func(obj *v1.RadixDeployment) { receivedRd = obj }}
	subject.AttachObserver(fakeObserver)
	sut := NewSubjectToInformerEventAdapater(subject)

	// Test OnAdd - should emit
	rdAdd := &v1.RadixDeployment{}
	sut.OnAdd(rdAdd)
	assert.Equal(t, rdAdd, receivedRd)

	// Test OnUpdate - should emit rdNewObj
	receivedRd = nil
	rdOldObj := &v1.RadixDeployment{}
	rdNewObj := &v1.RadixDeployment{}
	sut.OnUpdate(rdOldObj, rdNewObj)
	assert.Equal(t, rdNewObj, receivedRd)

	// Test OnDelete - should not emit
	receivedRd = nil
	sut.OnDelete(&v1.RadixDeployment{})
	assert.Nil(t, receivedRd)

	// Test incompatibe type - should not emit
	receivedRd = nil
	sut.OnAdd(v1.RadixDeployment{})
	assert.Nil(t, receivedRd)
}
