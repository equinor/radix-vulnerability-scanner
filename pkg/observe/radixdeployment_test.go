package observe

import (
	"testing"

	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	"github.com/equinor/radix-vulnerability-scanner/pkg/observe/fake"
	"github.com/stretchr/testify/assert"
)

func Test_RadixDeploymentContainerImageMapper(t *testing.T) {
	var receivedImages []string
	fakeObserver := fake.FakeStringObserver{OnReceive: func(receivedObj string) { receivedImages = append(receivedImages, receivedObj) }}
	sut := &RadixDeploymentContainerImageMapper{}
	sut.AttachObserver(&fakeObserver)
	sut.Receive(&v1.RadixDeployment{Spec: v1.RadixDeploymentSpec{
		Components: []v1.RadixDeployComponent{{Image: "c1"}, {Image: "c2"}},
		Jobs:       []v1.RadixDeployJobComponent{{Image: "j1"}, {Image: "j2"}},
	}})

	assert.ElementsMatch(t, []string{"c1", "c2", "j1", "j2"}, receivedImages)
}

func Test_RadixDeploymentListMapper(t *testing.T) {
	var receivedRds []*v1.RadixDeployment
	fakeObserver := fake.FakeRadixDeploymentObserver{OnReceive: func(receivedObj *v1.RadixDeployment) { receivedRds = append(receivedRds, receivedObj) }}
	sut := &RadixDeploymentListMapper{}
	sut.AttachObserver(&fakeObserver)
	rd1 := &v1.RadixDeployment{Spec: v1.RadixDeploymentSpec{AppName: "app1"}}
	rd2 := &v1.RadixDeployment{Spec: v1.RadixDeploymentSpec{AppName: "app2"}}
	sut.Receive([]*v1.RadixDeployment{rd1, rd2})
	assert.ElementsMatch(t, []*v1.RadixDeployment{rd1, rd2}, receivedRds)
}
