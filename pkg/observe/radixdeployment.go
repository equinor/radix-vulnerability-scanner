package observe

import (
	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
)

var _ Transformer[*v1.RadixDeployment, string] = &RadixDeploymentContainerImageMapper{}
var _ Transformer[[]*v1.RadixDeployment, *v1.RadixDeployment] = &RadixDeploymentListMapper{}

type (
	// RadixDeploymentContainerImageMapper receives RadixDeployments and emits images defines in jobs and componenets to any observers
	RadixDeploymentContainerImageMapper struct {
		observable[string]
	}

	// RadixDeploymentListMapper receives slices of RadixDeployments and emits each RadixDeployments to any observers
	RadixDeploymentListMapper struct {
		observable[*v1.RadixDeployment]
	}
)

func (m *RadixDeploymentContainerImageMapper) Receive(rd *v1.RadixDeployment) {
	if rd == nil {
		return
	}

	for _, c := range rd.Spec.Components {
		m.notifyObservers(c.GetImage())
	}

	for _, c := range rd.Spec.Jobs {
		m.notifyObservers(c.GetImage())
	}
}

func (m *RadixDeploymentListMapper) Receive(rds []*v1.RadixDeployment) {
	for _, rd := range rds {
		m.notifyObservers(rd)
	}
}
