package observe

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/equinor/radix-operator/pkg/apis/defaults"
	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	"github.com/equinor/radix-vulnerability-scanner/pkg/dockercfg"
	"github.com/rs/zerolog/log"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
)

type (
	// ImageInfo is sent to observers of RadixDeploymentContainerImageMapper
	ImageInfo struct {
		ImageName   string
		DockerAuths dockercfg.DockerAuthConfig
	}

	// RadixDeploymentContainerImageMapper receives RadixDeployments and emits images defined in jobs and componenets
	// together with docker auths data to any observers
	RadixDeploymentContainerImageMapper struct {
		KubeClient kubernetes.Interface
		observable[ImageInfo]
	}

	// RadixDeploymentListMapper receives slices of RadixDeployments and emits each RadixDeployments to any observers
	RadixDeploymentListMapper struct {
		observable[*v1.RadixDeployment]
	}
)

func (m *RadixDeploymentContainerImageMapper) Receive(rd *v1.RadixDeployment) {
	if rd == nil {
		return
	}

	dockerAuths, err := m.readDockerConfigJSON(rd.Namespace)
	if err != nil {
		log.Warn().Err(err).Msg("unable to read dockerconfigjson secret")
	}

	for _, c := range rd.Spec.Components {
		m.notifyObservers(ImageInfo{ImageName: c.GetImage(), DockerAuths: dockerAuths})
	}

	for _, c := range rd.Spec.Jobs {
		m.notifyObservers(ImageInfo{ImageName: c.GetImage(), DockerAuths: dockerAuths})
	}
}

func (m *RadixDeploymentContainerImageMapper) readDockerConfigJSON(namespace string) (dockercfg.DockerAuthConfig, error) {
	secret, err := m.KubeClient.CoreV1().Secrets(namespace).Get(context.Background(), defaults.PrivateImageHubSecretName, metav1.GetOptions{})
	if err != nil {
		return nil, err
	}

	authJSON, ok := secret.Data[corev1.DockerConfigJsonKey]
	if !ok {
		return nil, fmt.Errorf("secret %s in namespace %s does not contain data for %s", defaults.PrivateImageHubSecretName, namespace, corev1.DockerConfigJsonKey)
	}

	var dockerAuths dockercfg.DockerConfigAuthJSON
	err = json.Unmarshal(authJSON, &dockerAuths)
	if err != nil {
		return nil, err
	}

	return dockerAuths.Auths, nil
}

func (m *RadixDeploymentListMapper) Receive(rds []*v1.RadixDeployment) {
	for _, rd := range rds {
		m.notifyObservers(rd)
	}
}
