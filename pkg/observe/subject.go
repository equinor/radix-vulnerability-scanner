package observe

import (
	"sync"
)

var _ Subject[any] = &subject[any]{}

type (
	Subject[T any] interface {
		AttachObserver(observer Observer[T])
		DetachObserver(observer Observer[T])
		NotifyObservers(T)
	}

	subject[T any] struct {
		observers sync.Map
	}
)

func NewSubject[T any]() Subject[T] {
	return &subject[T]{}
}

func (o *subject[T]) AttachObserver(observer Observer[T]) {
	o.observers.Store(observer, struct{}{})
}

func (o *subject[T]) DetachObserver(observer Observer[T]) {
	o.observers.Delete(observer)
}

func (o *subject[T]) NotifyObservers(obj T) {
	o.observers.Range(func(key, value any) bool {
		if observer, ok := key.(Observer[T]); ok {
			observer.Receive(obj)
		}
		return true
	})
}
