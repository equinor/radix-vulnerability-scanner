package observe

import (
	"sync"
)

var _ Subject[any] = &subject[any]{}

type (
	Subject[T any] interface {
		Attach(observer Observer[T])
		Detach(observer Observer[T])
		Notify(T)
	}

	subject[T any] struct {
		observers sync.Map
	}
)

func (o *subject[T]) Attach(observer Observer[T]) {
	o.observers.Store(observer, struct{}{})
}

func (o *subject[T]) Detach(observer Observer[T]) {
	o.observers.Delete(observer)
}

func (o *subject[T]) Notify(obj T) {
	o.observers.Range(func(key, value any) bool {
		if observer, ok := key.(Observer[T]); ok {
			observer.OnNext(obj)
		}
		return true
	})
}
