package observe

import "k8s.io/client-go/tools/cache"

var _ cache.ResourceEventHandler = &subjectToInformerEventAdapater[any]{}

type subjectToInformerEventAdapater[T any] struct {
	subject Subject[T]
}

// NewSubjectToInformerEventAdapater adapts a Subject to a cache.ResourceEventHandler
// that can be used with K8S informers as argument to informer.AddEventHandler(...)
func NewSubjectToInformerEventAdapater[T any](subject Subject[T]) cache.ResourceEventHandler {
	return &subjectToInformerEventAdapater[T]{subject: subject}
}

func (a *subjectToInformerEventAdapater[T]) OnAdd(obj interface{}) {
	a.handleObj(obj)
}
func (a *subjectToInformerEventAdapater[T]) OnUpdate(oldObj, newObj interface{}) {
	a.handleObj(newObj)
}
func (a *subjectToInformerEventAdapater[T]) OnDelete(obj interface{}) {}

func (a *subjectToInformerEventAdapater[T]) handleObj(obj any) {
	if realObj, ok := obj.(T); ok {
		a.subject.Next(realObj)
	}
}
