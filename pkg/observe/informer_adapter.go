package observe

type SubjectToInformerEventAdapater[T any] struct {
	Subject Subject[T]
}

func NewSubjectToInformerEventAdapater[T any](subject Subject[T]) *SubjectToInformerEventAdapater[T] {
	return &SubjectToInformerEventAdapater[T]{Subject: subject}
}

func (a *SubjectToInformerEventAdapater[T]) OnAdd(obj interface{}) {
	a.handleObj(obj)
}
func (a *SubjectToInformerEventAdapater[T]) OnUpdate(oldObj, newObj interface{}) {
	a.handleObj(newObj)
}
func (a *SubjectToInformerEventAdapater[T]) OnDelete(obj interface{}) {}

func (a *SubjectToInformerEventAdapater[T]) handleObj(obj any) {
	if realObj, ok := obj.(T); ok {
		a.Subject.NotifyObservers(realObj)
	}
}
