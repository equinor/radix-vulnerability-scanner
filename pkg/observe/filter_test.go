package observe

import (
	"testing"

	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	"github.com/stretchr/testify/assert"
)

func Test_ActiveRadixDeploymentFilter(t *testing.T) {
	var receivedRd *v1.RadixDeployment
	fakeObserver := &fakeRadixDeploymentObserver{OnReceive: func(obj *v1.RadixDeployment) { receivedRd = obj }}
	sut := ActiveRadixDeploymentFilter()
	sut.AttachObserver(fakeObserver)
	observable := observable[*v1.RadixDeployment]{}
	observable.AttachObserver(sut)

	// Active RD should be emitted to observer
	activeRd := &v1.RadixDeployment{Status: v1.RadixDeployStatus{Condition: v1.DeploymentActive}}
	observable.notifyObservers(activeRd)
	assert.Equal(t, activeRd, receivedRd)

	// Inactive RD should not be emitted to observer
	receivedRd = nil
	inactiveRd := &v1.RadixDeployment{Status: v1.RadixDeployStatus{Condition: v1.DeploymentInactive}}
	observable.notifyObservers(inactiveRd)
	assert.Nil(t, receivedRd)
}

func Test_ExcludeRadixAppNamesFilter(t *testing.T) {
	var receivedRd *v1.RadixDeployment
	fakeObserver := &fakeRadixDeploymentObserver{OnReceive: func(obj *v1.RadixDeployment) { receivedRd = obj }}
	sut := ExcludeRadixAppNamesFilter([]string{"exclude1", "exclude2"})
	sut.AttachObserver(fakeObserver)
	observable := observable[*v1.RadixDeployment]{}
	observable.AttachObserver(sut)

	// RD with appName exclude1 in exclude list should not be emitted
	exclude1Rd := &v1.RadixDeployment{Spec: v1.RadixDeploymentSpec{AppName: "exclude1"}}
	observable.notifyObservers(exclude1Rd)
	assert.Nil(t, receivedRd)

	// RD with appName exclude2 in exclude list should not be emitted
	receivedRd = nil
	exclude2Rd := &v1.RadixDeployment{Spec: v1.RadixDeploymentSpec{AppName: "exclude2"}}
	observable.notifyObservers(exclude2Rd)
	assert.Nil(t, receivedRd)

	// RD with appName not in exclude list should be emitted
	receivedRd = nil
	anyappRd := &v1.RadixDeployment{Spec: v1.RadixDeploymentSpec{AppName: "anyapp"}}
	observable.notifyObservers(anyappRd)
	assert.Equal(t, anyappRd, receivedRd)
}
