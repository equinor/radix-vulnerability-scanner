package main

import (
	"context"
	"fmt"
	"sync"
	"time"
)

type (
	Image struct {
		Name            string
		Vulnerabilities []Vulnerability
		LastScanTime    time.Time
		LastScanSuccess bool
	}

	Vulnerability struct {
	}
)

type (
	ImageVulnerabilityRepository interface {
		Get(ctx context.Context, image string) (*Image, error)
		Store(ctx context.Context, image *Image) error
	}
)

type NotFound struct {
	Image string
}

func (e *NotFound) Error() string {
	return fmt.Sprintf("image %s not found", e.Image)
}

type ImageVulnerabilityRepositoryStub struct {
	store sync.Map
}

func (r *ImageVulnerabilityRepositoryStub) Get(ctx context.Context, image string) (*Image, error) {
	result, ok := r.store.Load(image)
	if !ok {
		return nil, &NotFound{image}
	}
	return result.(*Image), nil
}

func (r *ImageVulnerabilityRepositoryStub) Store(ctx context.Context, image *Image) error {
	r.store.Store(image.Name, image)
	return nil
}
