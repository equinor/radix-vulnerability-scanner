package main

import (
	"context"
	"fmt"
	"sync"
	"time"
)

type (
	Image struct {
		Id   int
		Name string
	}

	Scan struct {
		Id              int
		Vulnerabilities []Vulnerability
		ScanTime        time.Time
		ScanSuccess     bool
	}

	Vulnerability struct {
	}
)

type (
	ImageVulnerabilityRepository interface {
		GetLastScan(ctx context.Context, image string) (*Scan, error)
		AddScan(ctx context.Context, image string, scan *Scan) error
	}
)

type NotFound struct {
	Image string
}

func (e *NotFound) Error() string {
	return fmt.Sprintf("image %s not found", e.Image)
}

type ImageVulnerabilityRepositoryStub struct {
	store sync.Map
}

func (r *ImageVulnerabilityRepositoryStub) GetLastScan(ctx context.Context, image string) (*Scan, error) {
	result, ok := r.store.Load(image)
	if !ok {
		return nil, &NotFound{image}
	}
	return result.(*Scan), nil
}

func (r *ImageVulnerabilityRepositoryStub) AddScan(ctx context.Context, image string, scan *Scan) error {
	r.store.Store(image, scan)
	return nil
}
