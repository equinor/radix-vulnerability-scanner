package bkp

import (
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/equinor/radix-vulnerability-scanner/pkg/scan"
)

func NewVulnerabilityScanner(queue ScanQueue) *VulnerabilityScanner {
	return &VulnerabilityScanner{
		queue: queue,
	}
}

type VulnerabilityScanner struct {
	queue   ScanQueue
	scanner scan.Scanner
}

func (s *VulnerabilityScanner) Start(workers int, stop <-chan struct{}) error {
	var wg sync.WaitGroup

	for i := 0; i < workers; i++ {
		wg.Add(1)
		go func(id int) {
			defer wg.Done()
			s.worker(id, stop)
		}(i)
	}

	wg.Wait()
	return nil
}

func (s *VulnerabilityScanner) worker(id int, stop <-chan struct{}) {
	for {
		select {
		case <-stop:
			fmt.Printf("stopping %v\n", id)
			return
		default:
		}
		if processedImage, err := s.queue.ProcessNext(s.processImage); err != nil {
			fmt.Printf("error: %v\n", err)
		} else {
			fmt.Printf("%v: %v\n", id, processedImage)
		}
	}
}

func (s *VulnerabilityScanner) processImage(image string) error {
	time.Sleep(time.Second)
	if image == "bitnami/redis:latest" {
		return ErrRequeueImage{Err: errors.New("failed to scan")}
	}
	return nil

}

// func contextForChannel(parentCh <-chan struct{}) (context.Context, context.CancelFunc) {
// 	ctx, cancel := context.WithCancel(context.Background())

// 	go func() {
// 		select {
// 		case <-parentCh:
// 			cancel()
// 		case <-ctx.Done():
// 		}
// 	}()
// 	return ctx, cancel
// }
