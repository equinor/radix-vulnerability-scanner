package main

import (
	"context"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	"github.com/equinor/radix-vulnerability-scanner/pkg/server"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
)

func main() {
	ctx, cancel := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer cancel()

	opts, err := server.LoadOptions(os.Args[1:])
	if err != nil {
		log.Fatal().Msg(err.Error())
	}

	ctx, err = setupLogger(opts, ctx)
	if err != nil {
		log.Fatal().Msg(err.Error())
	}

	logOptions(opts)

	srv, err := server.New(opts)
	if err != nil {
		log.Fatal().Msg(err.Error())
	}

	err = srv.Run(ctx.Done())
	if err != nil {
		log.Fatal().Msg(err.Error())
	}
}

func setupLogger(opts *server.Options, ctx context.Context) (context.Context, error) {
	zerolog.DurationFieldUnit = time.Millisecond
	level, err := zerolog.ParseLevel(opts.LogLevel)
	if err != nil {
		return nil, err
	}

	zerolog.SetGlobalLevel(level)
	if opts.PrettyPrint {
		log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr, TimeFormat: time.TimeOnly})
	}
	ctx = log.Logger.WithContext(ctx)
	return ctx, nil
}

func logOptions(opts *server.Options) {
	log.Info().Msg("Configuration")
	log.Info().Msgf("  full-sync-cron-spec: %v", opts.FullSyncCronSpec)
	log.Info().Msgf("  app-name-exclude-list: %v", strings.Join(opts.AppNameExcludeList, ","))
	log.Info().Msgf("  workers: %v", opts.Workers)
	log.Info().Msgf("  db-server: %v", opts.DB.Server)
	log.Info().Msgf("  db-database: %v", opts.DB.Database)
	log.Info().Msgf("  db-username: %v", opts.DB.UserName)
	log.Info().Msgf("  db-password set: %v", len(opts.DB.Password) > 0)
	log.Info().Msgf("  vulnerability-scan-timeout: %s", opts.VulnerabilityScan.ScanTimeout)
	log.Info().Msgf("  vulnerability-rescan-age: %s", opts.VulnerabilityScan.RescanAge)
	log.Info().Msgf("  docker-config-file: %s", opts.Docker.AuthsFile)
	log.Info().Msgf("  kube-config-file: %s", opts.Kube.KubeConfigFile)
}
