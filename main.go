package main

import (
	"context"
	"os"
	"os/signal"
	"strings"
	"syscall"

	"github.com/equinor/radix-vulnerability-scanner/pkg/server"

	logger "github.com/sirupsen/logrus"
)

func main() {
	logger.SetLevel(logger.DebugLevel)
	logger.Info("Starting Radix Vulnerability Scanner")

	ctx, cancel := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer cancel()

	opts, err := server.LoadOptions(os.Args[1:])
	if err != nil {
		panic(err)
	}

	logOptions(opts)

	srv, err := server.New(opts)
	if err != nil {
		panic(err)
	}

	err = srv.Run(ctx.Done())
	if err != nil {
		panic(err)
	}
}

func logOptions(opts *server.Options) {
	logger.Info("Configuration")
	logger.Infof("  full-sync-cron-spec: %v", opts.FullSyncCronSpec)
	logger.Infof("  app-name-exclude-list: %v", strings.Join(opts.AppNameExcludeList, ","))
	logger.Infof("  workers: %v", opts.Workers)
	logger.Infof("  db-server: %v", opts.DB.Server)
	logger.Infof("  db-database: %v", opts.DB.Database)
	logger.Infof("  db-username: %v", opts.DB.UserName)
	logger.Infof("  db-password set: %v", len(opts.DB.Password) > 0)
	logger.Infof("  vulnerability-scan-timeout: %s", opts.VulnerabilityScan.ScanTimeout)
	logger.Infof("  vulnerability-rescan-age: %s", opts.VulnerabilityScan.RescanAge)
	logger.Infof("  docker-config-file: %s", opts.Docker.AuthsFile)
	logger.Infof("  kube-config-file: %s", opts.Kube.KubeConfigFile)
}
