package main

import (
	"context"
	"os"
	"os/signal"
	"syscall"

	"github.com/spf13/pflag"
	"gorm.io/driver/sqlserver"
	"gorm.io/gorm"
	gormlogger "gorm.io/gorm/logger"
	"gorm.io/gorm/schema"

	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	radixclient "github.com/equinor/radix-operator/pkg/client/clientset/versioned"
	radixinformer "github.com/equinor/radix-operator/pkg/client/informers/externalversions"

	"github.com/equinor/radix-vulnerability-scanner/pkg/db"
	"github.com/equinor/radix-vulnerability-scanner/pkg/handler"
	"github.com/equinor/radix-vulnerability-scanner/pkg/observe"
	"github.com/equinor/radix-vulnerability-scanner/pkg/scan"

	"github.com/sirupsen/logrus"
	logger "github.com/sirupsen/logrus"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/tools/clientcmd"
)

var defaultEnqueueAllCronSpec = "0 20 * * *"

func main() {
	logrus.SetLevel(logger.DebugLevel)

	configFlagsSet := pflag.NewFlagSet("radix-vuln-scanner", pflag.PanicOnError)
	kubeConfigFile := configFlagsSet.String("kube-config-file", "", "Name and path to the Kubernetes config file")
	dockerConfigFile := configFlagsSet.String("docker-config-file", "", "Name and path to file containing Docker auths")
	configFlagsSet.Parse(os.Args[1:])

	ctx, cancel := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer cancel()

	repo, err := getRepository()
	if err != nil {
		panic(err)
	}

	dockerAuth, err := loadDockerConfig(dockerConfigFile)
	if err != nil {
		panic(err)
	}

	snykScanner := scan.NewSnyk(dockerAuth)

	// Worker implements Observer[string] and can attach to subjecs of type string
	// Container images can be added manuallt to the worker by calling OnNext,
	// Or by attaching the worker to a Subject of type string
	worker := observe.NewImageWorker(handler.NewVulnerabilityScanAndStoreHandler(snykScanner, repo))
	worker.Start(1, ctx.Done())

	// A combined Observable and Observer. Subject takes a RadixDeployment as input, extracts images and notifies registered observer
	rdToImageMapper := &observe.RadixDeploymentContainerImageMapper{}
	rdToImageMapper.AttachObserver(worker)
	defer rdToImageMapper.DetachObserver(worker)

	// Filter on active deployments
	activeDeploymentFilter := observe.ActiveRadixDeploymentFilter()
	activeDeploymentFilter.AttachObserver(rdToImageMapper)
	defer activeDeploymentFilter.DetachObserver(rdToImageMapper)

	rdSubject := observe.NewSubject[*v1.RadixDeployment]()
	rdSubject.AttachObserver(activeDeploymentFilter)
	defer rdSubject.DetachObserver(activeDeploymentFilter)

	// A RadixDeployment Observable that can be used a EventHandler for a SharedIndexInformer
	adapter := observe.NewSubjectToInformerEventAdapater(rdSubject)

	radixClient, err := getRadixClient(*kubeConfigFile)
	if err != nil {
		logger.Fatalf("failed to init radixClient: %v", err)
	}
	sharedInformer := radixinformer.NewSharedInformerFactoryWithOptions(radixClient, 0) //radixinformer.WithNamespace("radix-job-demo-qa")

	sharedInformer.Radix().V1().RadixDeployments().Informer().AddEventHandler(adapter)
	sharedInformer.Start(ctx.Done())

	rdListToItem := &observe.RadixDeploymentListMapper{}
	rdListToItem.AttachObserver(activeDeploymentFilter)
	defer rdListToItem.DetachObserver(activeDeploymentFilter)

	rdlister := sharedInformer.Radix().V1().RadixDeployments().Lister()
	cronSubject := observe.NewCron(ctx, defaultEnqueueAllCronSpec, func() []*v1.RadixDeployment {
		if rds, err := rdlister.List(labels.Everything()); err != nil {
			return nil
		} else {
			return rds
		}
	})
	cronSubject.AttachObserver(rdListToItem)
	defer cronSubject.DetachObserver(rdListToItem)

	<-ctx.Done()
	logger.Info("shutting down")

}

func loadDockerConfig(configFile *string) (scan.DockerConfig, error) {
	if configFile != nil && *configFile != "" {
		return scan.ReadSpecificDockerConfigJSONFile(*configFile)
	}

	return nil, nil
}

func getRepository() (db.Repository, error) {
	dsn := os.Getenv("DB_CONN_STRING")

	gormdb, err := gorm.Open(sqlserver.Open(dsn), &gorm.Config{
		NamingStrategy: schema.NamingStrategy{NoLowerCase: true},
		Logger:         gormlogger.Default.LogMode(gormlogger.Silent),
	})
	if err != nil {
		return nil, err
	}

	return db.NewGormRepository(gormdb), nil
}

func getRadixClient(configFile string) (radixclient.Interface, error) {
	var clientConfig *rest.Config
	var err error

	if len(configFile) > 0 {
		loadingRules := &clientcmd.ClientConfigLoadingRules{ExplicitPath: configFile}
		loader := clientcmd.NewNonInteractiveDeferredLoadingClientConfig(loadingRules, &clientcmd.ConfigOverrides{})
		clientConfig, err = loader.ClientConfig()
	} else {
		clientConfig, err = rest.InClusterConfig()
	}

	if err != nil {
		return nil, err
	}

	return radixclient.NewForConfig(clientConfig)
}
