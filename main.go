package main

import (
	"context"
	"fmt"
	"os"
	"os/signal"
	"syscall"

	// _ "github.com/denisenkom/go-mssqldb"
	"github.com/robfig/cron/v3"
	"github.com/spf13/pflag"
	"gorm.io/driver/sqlserver"
	"gorm.io/gorm"
	"gorm.io/gorm/schema"

	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	radixclient "github.com/equinor/radix-operator/pkg/client/clientset/versioned"
	radixinformer "github.com/equinor/radix-operator/pkg/client/informers/externalversions"

	"github.com/equinor/radix-vulnerability-scanner/pkg/db"
	"github.com/equinor/radix-vulnerability-scanner/pkg/handler"
	"github.com/equinor/radix-vulnerability-scanner/pkg/observe"
	"github.com/equinor/radix-vulnerability-scanner/pkg/scan"

	"github.com/sirupsen/logrus"
	logger "github.com/sirupsen/logrus"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/tools/clientcmd"
)

// "github.com/robfig/cron/v3"

func main() {
	logrus.SetLevel(logger.DebugLevel)

	configFlagsSet := pflag.NewFlagSet("radix-vuln-scanner", pflag.PanicOnError)
	// kubeConfigFile := configFlagsSet.String("kube-config-file", "", "Name and path to the Kubernetes config file")
	configFlagsSet.Parse(os.Args[1:])

	ctx, cancel := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer cancel()

	repo, err := getRepository()
	if err != nil {
		panic(err)
	}

	snykScanner := scan.NewSnyk()

	// Worker implements Observer[string] and can attach to subjecs of type string
	// Container images can be added manuallt to the worker by calling OnNext,
	// Or by attaching the worker to a Subject of type string
	worker := observe.NewImageWorker(handler.NewVulnerabilityScanAndStoreHandler(snykScanner, repo))
	worker.Start(1, ctx.Done())

	// A combined Subject and Observer. Subject takes a RadixDeployment as input, extracts images and notifies registered observer
	rdToImageMapper := &observe.RadixDeploymentContainerImageMapper{}
	rdToImageMapper.Attach(worker)
	defer rdToImageMapper.Detach(worker)

	// A subject of RadixDeployment that observers can attach (subscribe) to
	// rdSubject := NewRadixDeploymentSubject()
	// rdSubject.Attach(rdToImageMapper)
	// defer rdSubject.Detach(rdToImageMapper)

	// A RadixDeployment Observable that can be used a EventHandler for a SharedIndexInformer
	rdInformerObservableAdapter := &observe.KubeInformerObservableAdapter[*v1.RadixDeployment]{}
	rdInformerObservableAdapter.Attach(rdToImageMapper)
	defer rdInformerObservableAdapter.Detach(rdToImageMapper)

	radixClient, _ := newRadixClient()
	sharedInformer := radixinformer.NewSharedInformerFactoryWithOptions(radixClient, 0) //radixinformer.WithNamespace("radix-job-demo-qa")
	// rdSubjectWriter := &ResourceEventHandlerSubjectWriter[*v1.RadixDeployment]{Subject: rdSubject}

	sharedInformer.Radix().V1().RadixDeployments().Informer().AddEventHandler(rdInformerObservableAdapter)
	sharedInformer.Start(ctx.Done())

	/* CRON */
	cronInformer := radixinformer.NewSharedInformerFactoryWithOptions(radixClient, 0)
	rdlister := cronInformer.Radix().V1().RadixDeployments().Lister()
	cronInformer.Start(ctx.Done())
	cronInformer.WaitForCacheSync(ctx.Done())
	c := cron.New(cron.WithSeconds())

	c.AddJob("0 0 */1 * * *", cron.FuncJob(func() {
		rds, _ := rdlister.List(labels.Everything())
		for _, rd := range rds {
			fmt.Println(rd)
			// rdSubject.Next(rd)
		}
	}))
	c.Start()
	defer c.Stop()

	select {
	case <-ctx.Done():
		logger.Info("shutting down")
	}
}

func getRepository() (db.Repository, error) {
	dsn := os.Getenv("DB_CONN_STRING")

	gormdb, err := gorm.Open(sqlserver.Open(dsn), &gorm.Config{NamingStrategy: schema.NamingStrategy{NoLowerCase: true}})
	if err != nil {
		return nil, nil
	}

	return db.NewGormRepository(gormdb), nil
}

func newRadixClient() (radixclient.Interface, error) {

	kubeConfigPath := os.Getenv("HOME") + "/.kube/config"
	config, err := clientcmd.BuildConfigFromFlags("", kubeConfigPath)

	if err != nil {
		config, err = rest.InClusterConfig()
		if err != nil {
			logger.Fatalf("getClusterConfig InClusterConfig: %v", err)
		}
	}

	return radixclient.NewForConfig(config)
}
